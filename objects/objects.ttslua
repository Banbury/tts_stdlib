--- Helper functions for dealing with groups of objects.
-- @module Objects

Objects = {}

--- Find objects based on the return value of a function.
-- The find function expects a table of objects and a function with a single parameter.
-- This function is called once for every object, with the object as an argument.
-- The function needs to return true for all objects, that should be found.
--
-- `Objects.find(getAllObjects(), function(o) return o.name!="BlockSquare" end)`
-- @param o Table of objects
-- @param fn Callback function with one parameter. Must return true or false.
-- @return Returns a table of objects, selected by the callback function.
Objects.find = function(o, fn)
    assert(type(o) == "table", "The first argument of exectute must be a table of objects.")
    assert(fn != nil, "find needs a function argument.")

    local ret = {}

    for key, value in pairs(o) do
        if (fn(value)) then
            table.insert(ret, value)
        end
    end

    return ret
end

--- Returns all objects held by the player with the given color.
-- @param color Color of the player as string.
-- @return Returns a table of objects.
Objects.getAllHeldByColor = function(color)
    assert(type(color) == "string", "getAllHeldByColor expects the name of a color.")

    local ret = {}

    local o = getAllObjects()

    for key, value in pairs(o) do
        if (value.held_by_color == color) then
            table.insert(ret, value)
        end
    end

    return ret
end

--- Executes a function on all given objects.
-- The callback function must have a single parameter. The function will be called
-- once for every object, with the object as an argument.
--
-- `Objects.execute(objects, function(o) o.highlightOn({1, 1, 0}, 5) end)`
-- @param o Table of objects
-- @param fn Callback function with one parameter and no return value.
Objects.execute = function(o, fn)
    assert(type(o) == "table", "The first argument of exectute must be a table of objects.")
    assert(fn != nil, "The second argument of execute must be a function.")

    for key, value in pairs(o) do
        fn(value)
    end
end
